package pojo;

import DAO.LoginDAO;
import java.util.List;
import javax.faces.bean.ManagedBean;
import javax.servlet.http.HttpSession;

/**
 * Login generated by hbm2java
 */
@ManagedBean
public class Login implements java.io.Serializable {

    private Integer id;
    private String email;
    private String password;
    private String role;
    private List<Login> loginList;
    
        public String Login_s() {
        LoginDAO uDao = new LoginDAO();
        List<Login> us = uDao.getBy(email, password);
        try {
            if (us != null) {
                email = us.get(0).email;
                password = us.get(0).password;
                return "List";
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return "Login_error";
    }
        
    public Login() {
    }

    public Login(String email) {
        this.email = email;
    }

    public Login(String email, String password, String role) {
        this.email = email;
        this.password = password;
        this.role = role;
    }

    // Getter and Setter for id
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    // Getter and Setter for email
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // Getter and Setter for password
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // Getter and Setter for role
    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    // Getter for loginList
    public List<Login> getLoginList() {
        return loginList == null ? this.getAllLogin() : loginList;
    }

    // Setter for loginList
    public void setLoginList(List<Login> loginList) {
        this.loginList = loginList;
    }

    // Method to retrieve all login data from the database
    public List<Login> getAllLogin() {
        LoginDAO loginDAO = new LoginDAO();
        return loginDAO.retrieveLogin();
    }
    
    public List<Login> getAllLoginRecords() {
        LoginDAO list = new LoginDAO();
        List<Login> loginList = list.retrieveLogin();
        return loginList;
    }

    // Method to retrieve login by ID
    public String getById() {
        String loginId = id.toString();
        LoginDAO login = new LoginDAO();
        List<Login> listLogin = login.getById(loginId);
        try {
            if (listLogin != null) {
                email = listLogin.get(0).getEmail();
                password = listLogin.get(0).getPassword();
                role = listLogin.get(0).getRole();
                return "admindetailedit";
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return "index";
    }

    // Method to save a new login
    public String saveLogin() {
        LoginDAO loginDAO = new LoginDAO();
        loginDAO.addLogin(this); // Assuming you will add this method to your DAO
        email = "";
        password = "";
        role = "";
        return "admindetail";
    }

    // Method to edit an existing login
    public String editLogin() {
        LoginDAO login = new LoginDAO();
        login.editLogin(this); // Assuming editLogin method is in LoginDAO
        email = "";
        password = "";
        role = "";
        return "admindetail";
    }

    // Method to delete login by ID
    public String deleteLogin() {
        LoginDAO login = new LoginDAO();
        login.deleteLogin(id); // Assuming deleteLogin method in LoginDAO
        email = "";
        password = "";
        role = "";
        return "admindetail";
    }

    // Method to retrieve login by ID for editing
    public String getById(int loginId) {
        LoginDAO loginDAO = new LoginDAO();
        List<Login> loginList = loginDAO.getById(String.valueOf(loginId));
        try {
            if (loginList != null && !loginList.isEmpty()) {
                this.id = loginList.get(0).getId();
                email = loginList.get(0).getEmail();
                password = loginList.get(0).getPassword();
                role = loginList.get(0).getRole();
                return "admindetailedit";
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        return "index";
    }
    
    public String logout() {
        HttpSession session = NailartUtil.getSession();
        session.invalidate();
        return "index";
    }

}
